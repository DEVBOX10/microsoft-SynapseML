"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[69105],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return f}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),f=r,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},35951:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=a(83117),r=a(80102),i=(a(67294),a(3905)),o=["components"],s={title:"Vowpal Wabbit - Classification using SparkML Vector",hide_title:!0,status:"stable",name:"Vowpal Wabbit - Classification using SparkML Vector"},l=void 0,p={unversionedId:"features/vw/Vowpal Wabbit - Classification using SparkML Vector",id:"version-0.11.2/features/vw/Vowpal Wabbit - Classification using SparkML Vector",title:"Vowpal Wabbit - Classification using SparkML Vector",description:"SparkML Vector input",source:"@site/versioned_docs/version-0.11.2/features/vw/Vowpal Wabbit - Classification using SparkML Vector.md",sourceDirName:"features/vw",slug:"/features/vw/Vowpal Wabbit - Classification using SparkML Vector",permalink:"/SynapseML/docs/features/vw/Vowpal Wabbit - Classification using SparkML Vector",draft:!1,tags:[],version:"0.11.2",frontMatter:{title:"Vowpal Wabbit - Classification using SparkML Vector",hide_title:!0,status:"stable"},sidebar:"docs",previous:{title:"About",permalink:"/SynapseML/docs/features/vw/about"},next:{title:"Vowpal Wabbit - Classification using VW-native Format",permalink:"/SynapseML/docs/features/vw/Vowpal Wabbit - Classification using VW-native Format"}},c={},u=[{value:"SparkML Vector input",id:"sparkml-vector-input",level:2},{value:"Read dataset",id:"read-dataset",level:4},{value:"Use VowpalWabbitFeaturizer to convert data features into vector",id:"use-vowpalwabbitfeaturizer-to-convert-data-features-into-vector",level:4},{value:"Split the dataset into train and test",id:"split-the-dataset-into-train-and-test",level:4},{value:"Model Training",id:"model-training",level:4},{value:"Model Prediction",id:"model-prediction",level:4}],d={toc:u};function f(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{width:"200",src:"https://mmlspark.blob.core.windows.net/graphics/emails/vw-blue-dark-orange.svg"}),(0,i.kt)("h1",{id:"binary-classification-with-vowpalwabbit-on-criteo-dataset"},"Binary Classification with VowpalWabbit on Criteo Dataset"),(0,i.kt)("h2",{id:"sparkml-vector-input"},"SparkML Vector input"),(0,i.kt)("h4",{id:"read-dataset"},"Read dataset"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from pyspark.sql import SparkSession\n\n# Bootstrap Spark Session\nspark = SparkSession.builder.getOrCreate()\n\nfrom synapse.ml.core.platform import *\n\nfrom synapse.ml.core.platform import materializing_display as display\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import pyspark.sql.types as T\nfrom pyspark.sql import functions as F\n\nschema = T.StructType(\n    [\n        T.StructField("label", T.IntegerType(), True),\n        *[T.StructField("i" + str(i), T.IntegerType(), True) for i in range(1, 13)],\n        *[T.StructField("s" + str(i), T.StringType(), True) for i in range(26)],\n    ]\n)\n\ndf = (\n    spark.read.format("csv")\n    .option("header", False)\n    .option("delimiter", "\\t")\n    .schema(schema)\n    .load("wasbs://publicwasb@mmlspark.blob.core.windows.net/criteo_day0_1k.csv.gz")\n)\n# print dataset basic info\nprint("records read: " + str(df.count()))\nprint("Schema: ")\ndf.printSchema()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"display(df)\n")),(0,i.kt)("h4",{id:"use-vowpalwabbitfeaturizer-to-convert-data-features-into-vector"},"Use VowpalWabbitFeaturizer to convert data features into vector"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.vw import VowpalWabbitFeaturizer\n\nfeaturizer = VowpalWabbitFeaturizer(\n    inputCols=[\n        *["i" + str(i) for i in range(1, 13)],\n        *["s" + str(i) for i in range(26)],\n    ],\n    outputCol="features",\n)\n\ndf = featurizer.transform(df).select("label", "features")\n')),(0,i.kt)("h4",{id:"split-the-dataset-into-train-and-test"},"Split the dataset into train and test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"train, test = df.randomSplit([0.85, 0.15], seed=1)\n")),(0,i.kt)("h4",{id:"model-training"},"Model Training"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.vw import VowpalWabbitClassifier\n\nmodel = VowpalWabbitClassifier(\n    numPasses=20,\n    labelCol="label",\n    featuresCol="features",\n    passThroughArgs="--holdout_off --loss_function logistic",\n).fit(train)\n')),(0,i.kt)("h4",{id:"model-prediction"},"Model Prediction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"predictions = model.transform(test)\ndisplay(predictions)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import ComputeModelStatistics\n\nmetrics = ComputeModelStatistics(\n    evaluationMetric="classification", labelCol="label", scoredLabelsCol="prediction"\n).transform(predictions)\ndisplay(metrics)\n')))}f.isMDXComponent=!0}}]);