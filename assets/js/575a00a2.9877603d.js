"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[63438],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(r),d=a,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||i;return r?n.createElement(g,o(o({ref:t},m),{},{components:r})):n.createElement(g,o({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},56985:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=r(83117),a=r(80102),i=(r(67294),r(3905)),o=["components"],s={title:"HyperParameterTuning - Fighting Breast Cancer",hide_title:!0,status:"stable",name:"HyperParameterTuning - Fighting Breast Cancer"},p="HyperParameterTuning - Fighting Breast Cancer",l={unversionedId:"features/other/HyperParameterTuning - Fighting Breast Cancer",id:"features/other/HyperParameterTuning - Fighting Breast Cancer",title:"HyperParameterTuning - Fighting Breast Cancer",description:"This tutorial shows how SynapseML can be used to identify the best combination of hyperparameters for your chosen classifiers, ultimately resulting in more accurate and reliable models. In order to demonstrate this, we'll show how to perform distributed randomized grid search hyperparameter tuning to build a model to identify breast cancer.",source:"@site/docs/features/other/HyperParameterTuning - Fighting Breast Cancer.md",sourceDirName:"features/other",slug:"/features/other/HyperParameterTuning - Fighting Breast Cancer",permalink:"/SynapseML/docs/next/features/other/HyperParameterTuning - Fighting Breast Cancer",draft:!1,tags:[],version:"current",frontMatter:{title:"HyperParameterTuning - Fighting Breast Cancer",hide_title:!0,status:"stable"},sidebar:"docs",previous:{title:"DeepLearning - Flower Image Classification",permalink:"/SynapseML/docs/next/features/other/DeepLearning - Flower Image Classification"},next:{title:"Cognitive",permalink:"/SynapseML/docs/next/documentation/transformers/transformers_cognitive"}},m={},u=[{value:"1 - Set up dependencies",id:"1---set-up-dependencies",level:2},{value:"2 - Find the best model using AutoML",id:"2---find-the-best-model-using-automl",level:2},{value:"3 - Evaluate the model",id:"3---evaluate-the-model",level:2}],c={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hyperparametertuning---fighting-breast-cancer"},"HyperParameterTuning - Fighting Breast Cancer"),(0,i.kt)("p",null,"This tutorial shows how SynapseML can be used to identify the best combination of hyperparameters for your chosen classifiers, ultimately resulting in more accurate and reliable models. In order to demonstrate this, we'll show how to perform distributed randomized grid search hyperparameter tuning to build a model to identify breast cancer. "),(0,i.kt)("h2",{id:"1---set-up-dependencies"},"1 - Set up dependencies"),(0,i.kt)("p",null,"Start by importing pandas and setting up our Spark session."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\nfrom pyspark.sql import SparkSession\n\n# Bootstrap Spark Session\nspark = SparkSession.builder.getOrCreate()\n")),(0,i.kt)("p",null,"Next, read the data and split it into tuning and test sets."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'data = spark.read.parquet(\n    "wasbs://publicwasb@mmlspark.blob.core.windows.net/BreastCancer.parquet"\n).cache()\ntune, test = data.randomSplit([0.80, 0.20])\ntune.limit(10).toPandas()\n')),(0,i.kt)("p",null,"Define the models to be used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.automl import TuneHyperparameters\nfrom synapse.ml.train import TrainClassifier\nfrom pyspark.ml.classification import (\n    LogisticRegression,\n    RandomForestClassifier,\n    GBTClassifier,\n)\n\nlogReg = LogisticRegression()\nrandForest = RandomForestClassifier()\ngbt = GBTClassifier()\nsmlmodels = [logReg, randForest, gbt]\nmmlmodels = [TrainClassifier(model=model, labelCol="Label") for model in smlmodels]\n')),(0,i.kt)("h2",{id:"2---find-the-best-model-using-automl"},"2 - Find the best model using AutoML"),(0,i.kt)("p",null,"Import SynapseML's AutoML classes from ",(0,i.kt)("inlineCode",{parentName:"p"},"synapse.ml.automl"),".\nSpecify the hyperparameters using the ",(0,i.kt)("inlineCode",{parentName:"p"},"HyperparamBuilder"),". Add either ",(0,i.kt)("inlineCode",{parentName:"p"},"DiscreteHyperParam")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeHyperParam")," hyperparameters. ",(0,i.kt)("inlineCode",{parentName:"p"},"TuneHyperparameters")," will randomly choose values from a uniform distribution:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from synapse.ml.automl import *\n\nparamBuilder = (\n    HyperparamBuilder()\n    .addHyperparam(logReg, logReg.regParam, RangeHyperParam(0.1, 0.3))\n    .addHyperparam(randForest, randForest.numTrees, DiscreteHyperParam([5, 10]))\n    .addHyperparam(randForest, randForest.maxDepth, DiscreteHyperParam([3, 5]))\n    .addHyperparam(gbt, gbt.maxBins, RangeHyperParam(8, 16))\n    .addHyperparam(gbt, gbt.maxDepth, DiscreteHyperParam([3, 5]))\n)\nsearchSpace = paramBuilder.build()\n# The search space is a list of params to tuples of estimator and hyperparam\nprint(searchSpace)\nrandomSpace = RandomSpace(searchSpace)\n")),(0,i.kt)("p",null,"Next, run TuneHyperparameters to get the best model."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'bestModel = TuneHyperparameters(\n    evaluationMetric="accuracy",\n    models=mmlmodels,\n    numFolds=2,\n    numRuns=len(mmlmodels) * 2,\n    parallelism=1,\n    paramSpace=randomSpace.space(),\n    seed=0,\n).fit(tune)\n')),(0,i.kt)("h2",{id:"3---evaluate-the-model"},"3 - Evaluate the model"),(0,i.kt)("p",null,"We can view the best model's parameters and retrieve the underlying best model pipeline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"print(bestModel.getBestModelInfo())\nprint(bestModel.getBestModel())\n")),(0,i.kt)("p",null,"We can score against the test set and view metrics."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from synapse.ml.train import ComputeModelStatistics\n\nprediction = bestModel.transform(test)\nmetrics = ComputeModelStatistics().transform(prediction)\nmetrics.limit(10).toPandas()\n")))}d.isMDXComponent=!0}}]);