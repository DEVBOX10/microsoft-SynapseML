"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[8933],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4433:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),o=["components"],l={title:"Text Explainers",hide_title:!0,status:"stable"},s=void 0,p={unversionedId:"Explore Algorithms/Responsible AI/Text Explainers",id:"version-0.11.4/Explore Algorithms/Responsible AI/Text Explainers",title:"Text Explainers",description:"Interpretability - Text Explainers",source:"@site/versioned_docs/version-0.11.4/Explore Algorithms/Responsible AI/Text Explainers.md",sourceDirName:"Explore Algorithms/Responsible AI",slug:"/Explore Algorithms/Responsible AI/Text Explainers",permalink:"/SynapseML/docs/Explore Algorithms/Responsible AI/Text Explainers",draft:!1,tags:[],version:"0.11.4",frontMatter:{title:"Text Explainers",hide_title:!0,status:"stable"},sidebar:"docs",previous:{title:"Tabular Explainers",permalink:"/SynapseML/docs/Explore Algorithms/Responsible AI/Tabular Explainers"},next:{title:"Image Explainers",permalink:"/SynapseML/docs/Explore Algorithms/Responsible AI/Image Explainers"}},c={},u=[{value:"Interpretability - Text Explainers",id:"interpretability---text-explainers",level:2}],m={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"interpretability---text-explainers"},"Interpretability - Text Explainers"),(0,a.kt)("p",null,"In this example, we use LIME and Kernel SHAP explainers to explain a text classification model."),(0,a.kt)("p",null,"First we import the packages and define some UDFs and a plotting function we will need later."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from pyspark.sql.functions import *\nfrom pyspark.sql.types import *\nfrom pyspark.ml import Pipeline\nfrom pyspark.ml.classification import LogisticRegression\nfrom synapse.ml.explainers import *\nfrom synapse.ml.featurize.text import TextFeaturizer\nfrom synapse.ml.core.platform import *\n\nvec2array = udf(lambda vec: vec.toArray().tolist(), ArrayType(FloatType()))\nvec_access = udf(lambda v, i: float(v[i]), FloatType())\n")),(0,a.kt)("p",null,"Load training data, and convert rating to binary label."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'data = (\n    spark.read.parquet("wasbs://publicwasb@mmlspark.blob.core.windows.net/BookReviewsFromAmazon10K.parquet")\n    .withColumn("label", (col("rating") > 3).cast(LongType()))\n    .select("label", "text")\n    .cache()\n)\n\ndisplay(data)\n')),(0,a.kt)("p",null,"We train a text classification model, and randomly sample 10 rows to explain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'train, test = data.randomSplit([0.60, 0.40])\n\npipeline = Pipeline(\n    stages=[\n        TextFeaturizer(\n            inputCol="text",\n            outputCol="features",\n            useStopWordsRemover=True,\n            useIDF=True,\n            minDocFreq=20,\n            numFeatures=1 << 16,\n        ),\n        LogisticRegression(maxIter=100, regParam=0.005, labelCol="label", featuresCol="features"),\n    ]\n)\n\nmodel = pipeline.fit(train)\n\nprediction = model.transform(test)\n\nexplain_instances = prediction.orderBy(rand()).limit(10)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'def plotConfusionMatrix(df, label, prediction, classLabels):\n    from synapse.ml.plot import confusionMatrix\n    import matplotlib.pyplot as plt\n\n    fig = plt.figure(figsize=(4.5, 4.5))\n    confusionMatrix(df, label, prediction, classLabels)\n    if running_on_synapse():\n        plt.show()\n    else:\n        display(fig)\n\n\nplotConfusionMatrix(model.transform(test), "label", "prediction", [0, 1])\n')),(0,a.kt)("p",null,"First we use the LIME text explainer to explain the model's predicted probability for a given observation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'lime = TextLIME(\n    model=model,\n    outputCol="weights",\n    inputCol="text",\n    targetCol="probability",\n    targetClasses=[1],\n    tokensCol="tokens",\n    samplingFraction=0.7,\n    numSamples=2000,\n)\n\nlime_results = (\n    lime.transform(explain_instances)\n    .select("tokens", "weights", "r2", "probability", "text")\n    .withColumn("probability", vec_access("probability", lit(1)))\n    .withColumn("weights", vec2array(col("weights").getItem(0)))\n    .withColumn("r2", vec_access("r2", lit(0)))\n    .withColumn("tokens_weights", arrays_zip("tokens", "weights"))\n)\n\ndisplay(lime_results.select("probability", "r2", "tokens_weights", "text").orderBy(col("probability").desc()))\n')),(0,a.kt)("p",null,"Then we use the Kernel SHAP text explainer to explain the model's predicted probability for a given observation."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Notice that we drop the base value from the SHAP output before displaying the SHAP values. The base value is the model output for an empty string.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'shap = TextSHAP(\n    model=model,\n    outputCol="shaps",\n    inputCol="text",\n    targetCol="probability",\n    targetClasses=[1],\n    tokensCol="tokens",\n    numSamples=5000,\n)\n\nshap_results = (\n    shap.transform(explain_instances)\n    .select("tokens", "shaps", "r2", "probability", "text")\n    .withColumn("probability", vec_access("probability", lit(1)))\n    .withColumn("shaps", vec2array(col("shaps").getItem(0)))\n    .withColumn("shaps", slice(col("shaps"), lit(2), size(col("shaps"))))\n    .withColumn("r2", vec_access("r2", lit(0)))\n    .withColumn("tokens_shaps", arrays_zip("tokens", "shaps"))\n)\n\ndisplay(shap_results.select("probability", "r2", "tokens_shaps", "text").orderBy(col("probability").desc()))\n')))}d.isMDXComponent=!0}}]);