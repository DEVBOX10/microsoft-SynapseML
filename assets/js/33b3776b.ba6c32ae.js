"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[5254],{3905:function(t,e,r){r.d(e,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},p=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=c(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return r?n.createElement(m,o(o({ref:e},p),{},{components:r})):n.createElement(m,o({ref:e},p))}));function f(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7046:function(t,e,r){r.r(e),r.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=["components"],s={title:"Quickstart - Classification using SparkML Vectors",hide_title:!0,status:"stable"},l=void 0,c={unversionedId:"Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using SparkML Vectors",id:"Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using SparkML Vectors",title:"Quickstart - Classification using SparkML Vectors",description:"SparkML Vector input",source:"@site/docs/Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using SparkML Vectors.md",sourceDirName:"Explore Algorithms/Vowpal Wabbit",slug:"/Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using SparkML Vectors",permalink:"/SynapseML/docs/Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using SparkML Vectors",draft:!1,tags:[],version:"current",frontMatter:{title:"Quickstart - Classification using SparkML Vectors",hide_title:!0,status:"stable"},sidebar:"docs",previous:{title:"Quickstart - Classification, Quantile Regression, and Regression",permalink:"/SynapseML/docs/Explore Algorithms/Vowpal Wabbit/Quickstart - Classification, Quantile Regression, and Regression"},next:{title:"Quickstart - Classification using VW-native Format",permalink:"/SynapseML/docs/Explore Algorithms/Vowpal Wabbit/Quickstart - Classification using VW-native Format"}},p={},u=[{value:"SparkML Vector input",id:"sparkml-vector-input",level:2},{value:"Read dataset",id:"read-dataset",level:4},{value:"Use VowpalWabbitFeaturizer to convert data features into vector",id:"use-vowpalwabbitfeaturizer-to-convert-data-features-into-vector",level:4},{value:"Split the dataset into train and test",id:"split-the-dataset-into-train-and-test",level:4},{value:"Model Training",id:"model-training",level:4},{value:"Model Prediction",id:"model-prediction",level:4}],d={toc:u};function f(t){var e=t.components,r=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("img",{width:"200",src:"https://mmlspark.blob.core.windows.net/graphics/emails/vw-blue-dark-orange.svg"}),(0,i.kt)("h1",{id:"binary-classification-with-vowpalwabbit-on-criteo-dataset"},"Binary Classification with VowpalWabbit on Criteo Dataset"),(0,i.kt)("h2",{id:"sparkml-vector-input"},"SparkML Vector input"),(0,i.kt)("h4",{id:"read-dataset"},"Read dataset"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import pyspark.sql.types as T\n\nschema = T.StructType(\n    [\n        T.StructField("label", T.IntegerType(), True),\n        *[T.StructField("i" + str(i), T.IntegerType(), True) for i in range(1, 13)],\n        *[T.StructField("s" + str(i), T.StringType(), True) for i in range(26)],\n    ]\n)\n\ndf = (\n    spark.read.format("csv")\n    .option("header", False)\n    .option("delimiter", "\\t")\n    .schema(schema)\n    .load("wasbs://publicwasb@mmlspark.blob.core.windows.net/criteo_day0_1k.csv.gz")\n)\n# print dataset basic info\nprint("records read: " + str(df.count()))\nprint("Schema: ")\ndf.printSchema()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"display(df)\n")),(0,i.kt)("h4",{id:"use-vowpalwabbitfeaturizer-to-convert-data-features-into-vector"},"Use VowpalWabbitFeaturizer to convert data features into vector"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.vw import VowpalWabbitFeaturizer\n\nfeaturizer = VowpalWabbitFeaturizer(\n    inputCols=[\n        *["i" + str(i) for i in range(1, 13)],\n        *["s" + str(i) for i in range(26)],\n    ],\n    outputCol="features",\n)\n\ndf = featurizer.transform(df).select("label", "features")\n')),(0,i.kt)("h4",{id:"split-the-dataset-into-train-and-test"},"Split the dataset into train and test"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"train, test = df.randomSplit([0.85, 0.15], seed=1)\n")),(0,i.kt)("h4",{id:"model-training"},"Model Training"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.vw import VowpalWabbitClassifier\n\nmodel = VowpalWabbitClassifier(\n    numPasses=20,\n    labelCol="label",\n    featuresCol="features",\n    passThroughArgs="--holdout_off --loss_function logistic",\n).fit(train)\n')),(0,i.kt)("h4",{id:"model-prediction"},"Model Prediction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"predictions = model.transform(test)\ndisplay(predictions)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import ComputeModelStatistics\n\nmetrics = ComputeModelStatistics(\n    evaluationMetric="classification", labelCol="label", scoredLabelsCol="prediction"\n).transform(predictions)\ndisplay(metrics)\n')))}f.isMDXComponent=!0}}]);