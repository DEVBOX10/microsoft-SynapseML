"use strict";(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[42562],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return d}});var t=n(67294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),m=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},c=function(e){var a=m(e.components);return t.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=m(n),d=o,f=u["".concat(i,".").concat(d)]||u[d]||p[d]||s;return n?t.createElement(f,r(r({ref:a},c),{},{components:n})):t.createElement(f,r({ref:a},c))}));function d(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=u;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var m=2;m<s;m++)r[m]=n[m];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85162:function(e,a,n){n.d(a,{Z:function(){return r}});var t=n(67294),o=n(86010),s="tabItem_Ymn6";function r(e){var a=e.children,n=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",className:(0,o.Z)(s,r),hidden:n},a)}},65488:function(e,a,n){n.d(a,{Z:function(){return d}});var t=n(83117),o=n(67294),s=n(86010),r=n(72389),l=n(67392),i=n(7094),m=n(12466),c="tabList__CuJ",p="tabItem_LNqP";function u(e){var a,n,r=e.lazy,u=e.block,d=e.defaultValue,f=e.values,y=e.groupId,v=e.className,g=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=f?f:g.map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes}})),b=(0,l.l)(k,(function(e,a){return e.value===a.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var h=null===d?d:null!=(a=null!=d?d:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?a:g[0].props.value;if(null!==h&&!k.some((function(e){return e.value===h})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+h+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,i.U)(),M=T.tabGroupChoices,C=T.setTabGroupChoices,I=(0,o.useState)(h),w=I[0],N=I[1],x=[],D=(0,m.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var S=M[y];null!=S&&S!==w&&k.some((function(e){return e.value===S}))&&N(S)}var R=function(e){var a=e.currentTarget,n=x.indexOf(a),t=k[n].value;t!==w&&(D(a),N(t),null!=y&&C(y,String(t)))},z=function(e){var a,n=null;switch(e.key){case"Enter":R(e);break;case"ArrowRight":var t,o=x.indexOf(e.currentTarget)+1;n=null!=(t=x[o])?t:x[0];break;case"ArrowLeft":var s,r=x.indexOf(e.currentTarget)-1;n=null!=(s=x[r])?s:x[x.length-1]}null==(a=n)||a.focus()};return o.createElement("div",{className:(0,s.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":u},v)},k.map((function(e){var a=e.value,n=e.label,r=e.attributes;return o.createElement("li",(0,t.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:function(e){return x.push(e)},onKeyDown:z,onClick:R},r,{className:(0,s.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":w===a})}),null!=n?n:a)}))),r?(0,o.cloneElement)(g.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map((function(e,a){return(0,o.cloneElement)(e,{key:a,hidden:e.props.value!==w})}))))}function d(e){var a=(0,r.Z)();return o.createElement(u,(0,t.Z)({key:String(a)},e))}},31989:function(e,a,n){var t=n(67294),o=n(52263);a.Z=function(e){var a=e.className,n=e.py,s=e.scala,r=e.csharp,l=e.sourceLink,i=(0,o.Z)().siteConfig.customFields.version,m="https://mmlspark.blob.core.windows.net/docs/"+i+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+i+"/scala/"+s,p="https://mmlspark.blob.core.windows.net/docs/"+i+"/dotnet/"+r;return t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("strong",null,"Python API: "),t.createElement("a",{href:m},a)),t.createElement("td",null,t.createElement("strong",null,"Scala API: "),t.createElement("a",{href:c},a)),t.createElement("td",null,t.createElement("strong",null,".NET API: "),t.createElement("a",{href:p},a)),t.createElement("td",null,t.createElement("strong",null,"Source: "),t.createElement("a",{href:l},a)))))}},16081:function(e,a,n){n.r(a),n.d(a,{assets:function(){return V},contentTitle:function(){return B},default:function(){return U},frontMatter:function(){return P},metadata:function(){return A},toc:function(){return H}});var t=n(83117),o=n(80102),s=(n(67294),n(3905)),r=n(65488),l=n(85162),i=n(31989),m=["components"],c=[{value:"AutoML",id:"automl",level:2},{value:"FindBestModel",id:"findbestmodel",level:3},{value:"TuneHyperparameters",id:"tunehyperparameters",level:3}],p={toc:c};function u(e){var a=e.components,n=(0,o.Z)(e,m);return(0,s.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"automl"},"AutoML"),(0,s.kt)("h3",{id:"findbestmodel"},"FindBestModel"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.automl import *\nfrom synapse.ml.train import *\nfrom pyspark.ml.classification import RandomForestClassifier\n\ndf = (spark.createDataFrame([\n    (0, 2, 0.50, 0.60, 0),\n    (1, 3, 0.40, 0.50, 1),\n    (0, 4, 0.78, 0.99, 2),\n    (1, 5, 0.12, 0.34, 3),\n    (0, 1, 0.50, 0.60, 0),\n    (1, 3, 0.40, 0.50, 1),\n    (0, 3, 0.78, 0.99, 2),\n    (1, 4, 0.12, 0.34, 3),\n    (0, 0, 0.50, 0.60, 0),\n    (1, 2, 0.40, 0.50, 1),\n    (0, 3, 0.78, 0.99, 2),\n    (1, 4, 0.12, 0.34, 3)\n], ["Label", "col1", "col2", "col3", "col4"]))\n\n# mocking models\nrandomForestClassifier = (TrainClassifier()\n      .setModel(RandomForestClassifier()\n        .setMaxBins(32)\n        .setMaxDepth(5)\n        .setMinInfoGain(0.0)\n        .setMinInstancesPerNode(1)\n        .setNumTrees(20)\n        .setSubsamplingRate(1.0)\n        .setSeed(0))\n      .setFeaturesCol("mlfeatures")\n      .setLabelCol("Label"))\nmodel = randomForestClassifier.fit(df)\n\nfindBestModel = (FindBestModel()\n  .setModels([model, model])\n  .setEvaluationMetric("accuracy"))\nbestModel = findBestModel.fit(df)\nbestModel.transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.automl._\nimport com.microsoft.azure.synapse.ml.train._\nimport spark.implicits._\nimport org.apache.spark.ml.Transformer\n\nval df = (Seq(\n      (0, 2, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 4, 0.78, 0.99, 2),\n      (1, 5, 0.12, 0.34, 3),\n      (0, 1, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3),\n      (0, 0, 0.50, 0.60, 0),\n      (1, 2, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3)\n  ).toDF("Label", "col1", "col2", "col3", "col4"))\n\n// mocking models\nval randomForestClassifier = (new TrainClassifier()\n      .setModel(\n        new RandomForestClassifier()\n        .setMaxBins(32)\n        .setMaxDepth(5)\n        .setMinInfoGain(0.0)\n        .setMinInstancesPerNode(1)\n        .setNumTrees(20)\n        .setSubsamplingRate(1.0)\n        .setSeed(0L))\n      .setFeaturesCol("mlfeatures")\n      .setLabelCol("Label"))\nval model = randomForestClassifier.fit(df)\n\nval findBestModel = (new FindBestModel()\n  .setModels(Array(model.asInstanceOf[Transformer], model.asInstanceOf[Transformer]))\n  .setEvaluationMetric("accuracy"))\nval bestModel = findBestModel.fit(df)\nbestModel.transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"FindBestModel",py:"synapse.ml.automl.html#module-synapse.ml.automl.FindBestModel",scala:"com/microsoft/azure/synapse/ml/automl/FindBestModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/automl/FindBestModel.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"tunehyperparameters"},"TuneHyperparameters"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.automl import *\nfrom synapse.ml.train import *\nfrom pyspark.ml.classification import LogisticRegression, RandomForestClassifier, GBTClassifier\n\n\ndf = (spark.createDataFrame([\n    (0, 1, 1, 1, 1, 1, 1.0, 3, 1, 1),\n    (0, 1, 1, 1, 1, 2, 1.0, 1, 1, 1),\n    (0, 1, 1, 1, 1, 2, 1.0, 2, 1, 1),\n    (0, 1, 2, 3, 1, 2, 1.0, 3, 1, 1),\n    (0, 3, 1, 1, 1, 2, 1.0, 3, 1, 1)\n], ["Label", "Clump_Thickness", "Uniformity_of_Cell_Size",\n    "Uniformity_of_Cell_Shape", "Marginal_Adhesion", "Single_Epithelial_Cell_Size",\n    "Bare_Nuclei", "Bland_Chromatin", "Normal_Nucleoli", "Mitoses"]))\n\nlogReg = LogisticRegression()\nrandForest = RandomForestClassifier()\ngbt = GBTClassifier()\nsmlmodels = [logReg, randForest, gbt]\nmmlmodels = [TrainClassifier(model=model, labelCol="Label") for model in smlmodels]\n\nparamBuilder = (HyperparamBuilder()\n    .addHyperparam(logReg, logReg.regParam, RangeHyperParam(0.1, 0.3))\n    .addHyperparam(randForest, randForest.numTrees, DiscreteHyperParam([5,10]))\n    .addHyperparam(randForest, randForest.maxDepth, DiscreteHyperParam([3,5]))\n    .addHyperparam(gbt, gbt.maxBins, RangeHyperParam(8,16))\n    .addHyperparam(gbt, gbt.maxDepth, DiscreteHyperParam([3,5])))\nsearchSpace = paramBuilder.build()\n# The search space is a list of params to tuples of estimator and hyperparam\nrandomSpace = RandomSpace(searchSpace)\n\nbestModel = TuneHyperparameters(\n              evaluationMetric="accuracy", models=mmlmodels, numFolds=2,\n              numRuns=len(mmlmodels) * 2, parallelism=2,\n              paramSpace=randomSpace.space(), seed=0).fit(df)\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.automl._\nimport com.microsoft.azure.synapse.ml.train._\nimport spark.implicits._\n\nval logReg = new LogisticRegression()\nval randForest = new RandomForestClassifier()\nval gbt = new GBTClassifier()\nval smlmodels = Seq(logReg, randForest, gbt)\nval mmlmodels = smlmodels.map(model => new TrainClassifier().setModel(model).setLabelCol("Label"))\n\nval paramBuilder = new HyperparamBuilder()\n  .addHyperparam(logReg.regParam, new DoubleRangeHyperParam(0.1, 0.3))\n  .addHyperparam(randForest.numTrees, new DiscreteHyperParam(List(5,10)))\n  .addHyperparam(randForest.maxDepth, new DiscreteHyperParam(List(3,5)))\n  .addHyperparam(gbt.maxBins, new IntRangeHyperParam(8,16))\n.addHyperparam(gbt.maxDepth, new DiscreteHyperParam(List(3,5)))\nval searchSpace = paramBuilder.build()\nval randomSpace = new RandomSpace(searchSpace)\n\nval dataset: DataFrame = Seq(\n  (0, 1, 1, 1, 1, 1, 1.0, 3, 1, 1),\n  (0, 1, 1, 1, 1, 2, 1.0, 1, 1, 1),\n  (0, 1, 1, 1, 1, 2, 1.0, 2, 1, 1),\n  (0, 1, 2, 3, 1, 2, 1.0, 3, 1, 1),\n  (0, 3, 1, 1, 1, 2, 1.0, 3, 1, 1))\n  .toDF("Label", "Clump_Thickness", "Uniformity_of_Cell_Size",\n    "Uniformity_of_Cell_Shape", "Marginal_Adhesion", "Single_Epithelial_Cell_Size",\n    "Bare_Nuclei", "Bland_Chromatin", "Normal_Nucleoli", "Mitoses")\n\nval tuneHyperparameters = new TuneHyperparameters().setEvaluationMetric("accuracy")\n  .setModels(mmlmodels.toArray).setNumFolds(2).setNumRuns(mmlmodels.length * 2)\n  .setParallelism(1).setParamSpace(randomSpace).setSeed(0)\ntuneHyperparameters.fit(dataset).show()\n')))),(0,s.kt)(i.Z,{className:"TuneHyperparameters",py:"synapse.ml.automl.html#module-synapse.ml.automl.TuneHyperparameters",scala:"com/microsoft/azure/synapse/ml/automl/TuneHyperparameters.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/automl/TuneHyperparameters.scala",mdxType:"DocTable"}))}u.isMDXComponent=!0;var d=["components"],f=[{value:"Featurize",id:"featurize",level:2},{value:"CleanMissingData",id:"cleanmissingdata",level:3},{value:"CountSelector",id:"countselector",level:3},{value:"Featurize",id:"featurize-1",level:3},{value:"ValueIndexer",id:"valueindexer",level:3},{value:"Featurize Text",id:"featurize-text",level:2},{value:"TextFeaturizer",id:"textfeaturizer",level:3}],y={toc:f};function v(e){var a=e.components,n=(0,o.Z)(e,d);return(0,s.kt)("wrapper",(0,t.Z)({},y,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"featurize"},"Featurize"),(0,s.kt)("h3",{id:"cleanmissingdata"},"CleanMissingData"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndataset = spark.createDataFrame([\n    (0,    2,    0.50, 0.60, 0),\n    (1,    3,    0.40, None, None),\n    (0,    4,    0.78, 0.99, 2),\n    (1,    5,    0.12, 0.34, 3),\n    (0,    1,    0.50, 0.60, 0),\n    (None, None, None, None, None),\n    (0,    3,    0.78, 0.99, 2),\n    (1,    4,    0.12, 0.34, 3),\n    (0,    None, 0.50, 0.60, 0),\n    (1,    2,    0.40, 0.50, None),\n    (0,    3,    None, 0.99, 2),\n    (1,    4,    0.12, 0.34, 3)\n], ["col1", "col2", "col3", "col4", "col5"])\n\ncmd = (CleanMissingData()\n      .setInputCols(dataset.columns)\n      .setOutputCols(dataset.columns)\n      .setCleaningMode("Mean"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport java.lang.{Boolean => JBoolean, Double => JDouble, Integer => JInt}\nimport spark.implicits._\n\ndef createMockDataset: DataFrame = {\n    Seq[(JInt, JInt, JDouble, JDouble, JInt)](\n      (0,    2,    0.50, 0.60, 0),\n      (1,    3,    0.40, null, null),\n      (0,    4,    0.78, 0.99, 2),\n      (1,    5,    0.12, 0.34, 3),\n      (0,    1,    0.50, 0.60, 0),\n      (null, null, null, null, null),\n      (0,    3,    0.78, 0.99, 2),\n      (1,    4,    0.12, 0.34, 3),\n      (0,    null, 0.50, 0.60, 0),\n      (1,    2,    0.40, 0.50, null),\n      (0,    3,    null, 0.99, 2),\n      (1,    4,    0.12, 0.34, 3))\n      .toDF("col1", "col2", "col3", "col4", "col5")\n  }\n\nval dataset = createMockDataset\nval cmd = (new CleanMissingData()\n      .setInputCols(dataset.columns)\n      .setOutputCols(dataset.columns)\n      .setCleaningMode("Mean"))\n')))),(0,s.kt)(i.Z,{className:"CleanMissingData",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.CleanMissingData",scala:"com/microsoft/azure/synapse/ml/featurize/CleanMissingData.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/CleanMissingData.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"countselector"},"CountSelector"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\nfrom pyspark.ml.linalg import Vectors\n\ndf = spark.createDataFrame([\n    (Vectors.sparse(3, [(0, 1.0), (2, 2.0)]), Vectors.dense(1.0, 0.1, 0)),\n    (Vectors.sparse(3, [(0, 1.0), (2, 2.0)]), Vectors.dense(1.0, 0.1, 0))\n], ["col1", "col2"])\n\ncs = CountSelector().setInputCol("col1").setOutputCol("col3")\n\ncs.fit(df).transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport org.apache.spark.ml.linalg.Vectors\nimport spark.implicits._\n\nval df = Seq(\n    (Vectors.sparse(3, Seq((0, 1.0), (2, 2.0))), Vectors.dense(1.0, 0.1, 0)),\n    (Vectors.sparse(3, Seq((0, 1.0), (2, 2.0))), Vectors.dense(1.0, 0.1, 0))\n  ).toDF("col1", "col2")\n\nval cs = (new CountSelector()\n            .setInputCol("col1")\n            .setOutputCol("col3"))\n\ncs.fit(df).transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"CountSelector",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.CountSelector",scala:"com/microsoft/azure/synapse/ml/featurize/CountSelector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/CountSelector.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"featurize-1"},"Featurize"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndataset = spark.createDataFrame([\n    (0, 2, 0.50, 0.60, "pokemon are everywhere"),\n    (1, 3, 0.40, 0.50, "they are in the woods"),\n    (0, 4, 0.78, 0.99, "they are in the water"),\n    (1, 5, 0.12, 0.34, "they are in the fields"),\n    (0, 3, 0.78, 0.99, "pokemon - gotta catch em all")\n], ["Label", "col1", "col2", "col3"])\n\nfeat = (Featurize()\n      .setNumFeatures(10)\n      .setOutputCol("testColumn")\n      .setInputCols(["col1", "col2", "col3"])\n      .setOneHotEncodeCategoricals(False))\n\nfeat.fit(dataset).transform(dataset).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval dataset = Seq(\n      (0, 2, 0.50, 0.60, "pokemon are everywhere"),\n      (1, 3, 0.40, 0.50, "they are in the woods"),\n      (0, 4, 0.78, 0.99, "they are in the water"),\n      (1, 5, 0.12, 0.34, "they are in the fields"),\n      (0, 3, 0.78, 0.99, "pokemon - gotta catch em all")).toDF("Label", "col1", "col2", "col3")\n\nval featureColumns = dataset.columns.filter(_ != "Label")\n\nval feat = (new Featurize()\n      .setNumFeatures(10)\n      .setOutputCol("testColumn")\n      .setInputCols(featureColumns)\n      .setOneHotEncodeCategoricals(false))\n\nfeat.fit(dataset).transform(dataset).show()\n')))),(0,s.kt)(i.Z,{className:"Featurize",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.Featurize",scala:"com/microsoft/azure/synapse/ml/featurize/Featurize.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/Featurize.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"valueindexer"},"ValueIndexer"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndf = spark.createDataFrame([\n    (-3, 24, 0.32534, True, "piano"),\n    (1, 5, 5.67, False, "piano"),\n    (-3, 5, 0.32534, False, "guitar")\n], ["int", "long", "double", "bool", "string"])\n\nvi = ValueIndexer().setInputCol("string").setOutputCol("string_cat")\n\nvi.fit(df).transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval df = Seq[(Int, Long, Double, Boolean, String)](\n    (-3, 24L, 0.32534, true, "piano"),\n    (1, 5L, 5.67, false, "piano"),\n    (-3, 5L, 0.32534, false, "guitar")).toDF("int", "long", "double", "bool", "string")\n\nval vi = new ValueIndexer().setInputCol("string").setOutputCol("string_cat")\n\nvi.fit(df).transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"ValueIndexer",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.ValueIndexer",scala:"com/microsoft/azure/synapse/ml/featurize/ValueIndexer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/ValueIndexer.scala",mdxType:"DocTable"}),(0,s.kt)("h2",{id:"featurize-text"},"Featurize Text"),(0,s.kt)("h3",{id:"textfeaturizer"},"TextFeaturizer"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize.text import *\n\ndfRaw = spark.createDataFrame([\n    (0, "Hi I"),\n    (1, "I wish for snow today"),\n    (2, "we Cant go to the park, because of the snow!"),\n    (3, "")\n], ["label", "sentence"])\n\ntfRaw = (TextFeaturizer()\n      .setInputCol("sentence")\n      .setOutputCol("features")\n      .setNumFeatures(20))\n\ntfRaw.fit(dfRaw).transform(dfRaw).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize.text._\nimport spark.implicits._\n\nval dfRaw = Seq((0, "Hi I"),\n            (1, "I wish for snow today"),\n            (2, "we Cant go to the park, because of the snow!"),\n            (3, "")).toDF("label", "sentence")\n\nval tfRaw = (new TextFeaturizer()\n      .setInputCol("sentence")\n      .setOutputCol("features")\n      .setNumFeatures(20))\n\ntfRaw.fit(dfRaw).transform(dfRaw).show()\n')))),(0,s.kt)(i.Z,{className:"TextFeaturizer",py:"synapse.ml.featurize.text.html#module-synapse.ml.featurize.text.TextFeaturizer",scala:"com/microsoft/azure/synapse/ml/featurize/text/TextFeaturizer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/text/TextFeaturizer.scala",mdxType:"DocTable"}))}v.isMDXComponent=!0;var g=["components"],k=[{value:"Isolation Forest",id:"isolation-forest",level:2},{value:"IsolationForest",id:"isolationforest",level:3}],b={toc:k};function h(e){var a=e.components,n=(0,o.Z)(e,g);return(0,s.kt)("wrapper",(0,t.Z)({},b,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"isolation-forest"},"Isolation Forest"),(0,s.kt)("h3",{id:"isolationforest"},"IsolationForest"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.isolationforest import *\n\nisolationForest = (IsolationForest()\n      .setNumEstimators(100)\n      .setBootstrap(False)\n      .setMaxSamples(256)\n      .setMaxFeatures(1.0)\n      .setFeaturesCol("features")\n      .setPredictionCol("predictedLabel")\n      .setScoreCol("outlierScore")\n      .setContamination(0.02)\n      .setContaminationError(0.02 * 0.01)\n      .setRandomSeed(1))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.isolationforest._\nimport spark.implicits._\n\nval isolationForest = (new IsolationForest()\n      .setNumEstimators(100)\n      .setBootstrap(false)\n      .setMaxSamples(256)\n      .setMaxFeatures(1.0)\n      .setFeaturesCol("features")\n      .setPredictionCol("predictedLabel")\n      .setScoreCol("outlierScore")\n      .setContamination(0.02)\n      .setContaminationError(0.02 * 0.01)\n      .setRandomSeed(1))\n')))),(0,s.kt)(i.Z,{className:"IsolationForest",py:"synapse.ml.isolationforest.html#module-synapse.ml.isolationforest.IsolationForest",scala:"com/microsoft/azure/synapse/ml/isolationforest/IsolationForest.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/isolationforest/IsolationForest.scala",mdxType:"DocTable"}))}h.isMDXComponent=!0;var T=["components"],M=[{value:"NN",id:"nn",level:2},{value:"ConditionalKNN",id:"conditionalknn",level:3},{value:"KNN",id:"knn",level:3}],C={toc:M};function I(e){var a=e.components,n=(0,o.Z)(e,T);return(0,s.kt)("wrapper",(0,t.Z)({},C,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"nn"},"NN"),(0,s.kt)("h3",{id:"conditionalknn"},"ConditionalKNN"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.nn import *\n\ncknn = (ConditionalKNN()\n      .setOutputCol("matches")\n      .setFeaturesCol("features"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.nn._\nimport spark.implicits._\n\nval cknn = (new ConditionalKNN()\n            .setOutputCol("matches")\n            .setFeaturesCol("features"))\n')))),(0,s.kt)(i.Z,{className:"ConditionalKNN",py:"synapse.ml.nn.html#module-synapse.ml.nn.ConditionalKNN",scala:"com/microsoft/azure/synapse/ml/nn/ConditionalKNN.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/nn/ConditionalKNN.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"knn"},"KNN"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.nn import *\n\nknn = (KNN()\n      .setOutputCol("matches"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.nn._\nimport spark.implicits._\n\nval knn = (new KNN()\n      .setOutputCol("matches"))\n')))),(0,s.kt)(i.Z,{className:"KNN",py:"synapse.ml.nn.html#module-synapse.ml.nn.KNN",scala:"com/microsoft/azure/synapse/ml/nn/KNN.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/nn/KNN.scala",mdxType:"DocTable"}))}I.isMDXComponent=!0;var w=["components"],N=[{value:"Recommendation",id:"recommendation",level:2},{value:"RecommendationIndexer, RankingEvaluator, RankingAdapter and RankingTrainValidationSplit",id:"recommendationindexer-rankingevaluator-rankingadapter-and-rankingtrainvalidationsplit",level:3},{value:"SAR",id:"sar",level:3}],x={toc:N};function D(e){var a=e.components,n=(0,o.Z)(e,w);return(0,s.kt)("wrapper",(0,t.Z)({},x,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"recommendation"},"Recommendation"),(0,s.kt)("h3",{id:"recommendationindexer-rankingevaluator-rankingadapter-and-rankingtrainvalidationsplit"},"RecommendationIndexer, RankingEvaluator, RankingAdapter and RankingTrainValidationSplit"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.recommendation import *\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.tuning import *\n\nratings = (spark.createDataFrame([\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3)\n      ], ["customerIDOrg", "itemIDOrg", "rating"])\n    .dropDuplicates()\n    .cache())\n\nrecommendationIndexer = (RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\ntransformedDf = (recommendationIndexer.fit(ratings)\n    .transform(ratings).cache())\n\nals = (ALS()\n    .setNumUserBlocks(1)\n    .setNumItemBlocks(1)\n    .setUserCol("customerID")\n    .setItemCol("itemID")\n    .setRatingCol("rating")\n    .setSeed(0))\n\nevaluator = (RankingEvaluator()\n    .setK(3)\n    .setNItems(10))\n\nadapter = (RankingAdapter()\n    .setK(evaluator.getK())\n    .setRecommender(als))\n\nadapter.fit(transformedDf).transform(transformedDf).show()\n\nparamGrid = (ParamGridBuilder()\n    .addGrid(als.regParam, [1.0])\n    .build())\n\ntvRecommendationSplit = (RankingTrainValidationSplit()\n      .setEstimator(als)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid)\n      .setTrainRatio(0.8)\n      .setUserCol(recommendationIndexer.getUserOutputCol())\n      .setItemCol(recommendationIndexer.getItemOutputCol())\n      .setRatingCol("rating"))\n\ntvRecommendationSplit.fit(transformedDf).transform(transformedDf).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.recommendation._\nimport org.apache.spark.ml.recommendation.ALS\nimport org.apache.spark.ml.tuning._\nimport spark.implicits._\n\nval ratings = (Seq(\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3))\n    .toDF("customerIDOrg", "itemIDOrg", "rating")\n    .dropDuplicates()\n    .cache())\n\nval recommendationIndexer = (new RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nval transformedDf = (recommendationIndexer.fit(ratings)\n    .transform(ratings).cache())\n\nval als = (new ALS()\n    .setNumUserBlocks(1)\n    .setNumItemBlocks(1)\n    .setUserCol("customerID")\n    .setItemCol("itemID")\n    .setRatingCol("rating")\n    .setSeed(0))\n\nval evaluator = (new RankingEvaluator()\n    .setK(3)\n    .setNItems(10))\n\nval adapter = (new RankingAdapter()\n    .setK(evaluator.getK)\n    .setRecommender(als))\n\nadapter.fit(transformedDf).transform(transformedDf).show()\n\nval paramGrid = (new ParamGridBuilder()\n    .addGrid(als.regParam, Array(1.0))\n    .build())\n\nval tvRecommendationSplit = (new RankingTrainValidationSplit()\n      .setEstimator(als)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid)\n      .setTrainRatio(0.8)\n      .setUserCol(recommendationIndexer.getUserOutputCol)\n      .setItemCol(recommendationIndexer.getItemOutputCol)\n      .setRatingCol("rating"))\n\ntvRecommendationSplit.fit(transformedDf).transform(transformedDf).show()\n')))),(0,s.kt)(i.Z,{className:"RecommendationIndexer",py:"synapse.ml.recommendation.html#module-synapse.ml.recommendation.RecommendationIndexer",scala:"com/microsoft/azure/synapse/ml/recommendation/RecommendationIndexer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RecommendationIndexer.scala",mdxType:"DocTable"}),(0,s.kt)(i.Z,{className:"RankingEvaluator",py:"synapse.ml.recommendation.html#module-synapse.ml.recommendation.RankingEvaluator",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingEvaluator.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingEvaluator.scala",mdxType:"DocTable"}),(0,s.kt)(i.Z,{className:"RankingAdapter",py:"synapse.ml.recommendation.html#module-synapse.ml.recommendation.RankingAdapter",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingAdapter.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingAdapter.scala",mdxType:"DocTable"}),(0,s.kt)(i.Z,{className:"RankingTrainValidationSplit",py:"synapse.ml.recommendation.html#module-synapse.ml.recommendation.RankingTrainValidationSplit",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingTrainValidationSplit.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingTrainValidationSplit.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"sar"},"SAR"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.recommendation import *\n\nratings = (spark.createDataFrame([\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3)\n      ], ["customerIDOrg", "itemIDOrg", "rating"])\n    .dropDuplicates()\n    .cache())\n\nrecommendationIndexer = (RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nalgo = (SAR()\n      .setUserCol("customerID")\n      .setItemCol("itemID")\n      .setRatingCol("rating")\n      .setTimeCol("timestamp")\n      .setSupportThreshold(1)\n      .setSimilarityFunction("jacccard")\n      .setActivityTimeFormat("EEE MMM dd HH:mm:ss Z yyyy"))\n\nadapter = (RankingAdapter()\n      .setK(5)\n      .setRecommender(algo))\n\nres1 = recommendationIndexer.fit(ratings).transform(ratings).cache()\n\nadapter.fit(res1).transform(res1).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.recommendation._\nimport spark.implicits._\n\nval ratings = (Seq(\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3))\n    .toDF("customerIDOrg", "itemIDOrg", "rating")\n    .dropDuplicates()\n    .cache())\n\nval recommendationIndexer = (new RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nval algo = (new SAR()\n      .setUserCol("customerID")\n      .setItemCol("itemID")\n      .setRatingCol("rating")\n      .setTimeCol("timestamp")\n      .setSupportThreshold(1)\n      .setSimilarityFunction("jacccard")\n      .setActivityTimeFormat("EEE MMM dd HH:mm:ss Z yyyy"))\n\nval adapter = (new RankingAdapter()\n      .setK(5)\n      .setRecommender(algo))\n\nval res1 = recommendationIndexer.fit(ratings).transform(ratings).cache()\n\nadapter.fit(res1).transform(res1).show()\n')))),(0,s.kt)(i.Z,{className:"SAR",py:"synapse.ml.recommendation.html#module-synapse.ml.recommendation.SAR",scala:"com/microsoft/azure/synapse/ml/recommendation/SAR.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/SAR.scala",mdxType:"DocTable"}))}D.isMDXComponent=!0;var S=["components"],R=[{value:"Stages",id:"stages",level:2},{value:"ClassBalancer",id:"classbalancer",level:3},{value:"MultiColumnAdapter",id:"multicolumnadapter",level:3},{value:"Timer",id:"timer",level:3}],z={toc:R};function F(e){var a=e.components,n=(0,o.Z)(e,S);return(0,s.kt)("wrapper",(0,t.Z)({},z,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"stages"},"Stages"),(0,s.kt)("h3",{id:"classbalancer"},"ClassBalancer"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 1.0, "Hi I"),\n      (1, 1.0, "I wish for snow today"),\n      (2, 2.0, "I wish for snow today"),\n      (3, 2.0, "I wish for snow today"),\n      (4, 2.0, "I wish for snow today"),\n      (5, 2.0, "I wish for snow today"),\n      (6, 0.0, "I wish for snow today"),\n      (7, 1.0, "I wish for snow today"),\n      (8, 0.0, "we Cant go to the park, because of the snow!"),\n      (9, 2.0, "")\n      ], ["index", "label", "sentence"]))\n\ncb = ClassBalancer().setInputCol("label")\n\ncb.fit(df).transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = Seq(\n      (0, 1.0, "Hi I"),\n      (1, 1.0, "I wish for snow today"),\n      (2, 2.0, "I wish for snow today"),\n      (3, 2.0, "I wish for snow today"),\n      (4, 2.0, "I wish for snow today"),\n      (5, 2.0, "I wish for snow today"),\n      (6, 0.0, "I wish for snow today"),\n      (7, 1.0, "I wish for snow today"),\n      (8, 0.0, "we Cant go to the park, because of the snow!"),\n      (9, 2.0, "")).toDF("index", "label", "sentence")\n\nval cb = new ClassBalancer().setInputCol("label")\n\ncb.fit(df).transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"ClassBalancer",py:"synapse.ml.stages.html#module-synapse.ml.stages.ClassBalancer",scala:"com/microsoft/azure/synapse/ml/stages/ClassBalancer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/ClassBalancer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"multicolumnadapter"},"MultiColumnAdapter"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.ml.feature import Tokenizer\n\ndf = (spark.createDataFrame([\n        (0, "This is a test", "this is one too"),\n        (1, "could be a test", "bar"),\n        (2, "foo", "bar"),\n        (3, "foo", "maybe not")\n      ], ["label", "words1", "words2"]))\n\nstage1 = Tokenizer()\nmca = (MultiColumnAdapter()\n        .setBaseStage(stage1)\n        .setInputCols(["words1",  "words2"])\n        .setOutputCols(["output1", "output2"]))\n\nmca.fit(df).transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.ml.feature.Tokenizer\n\nval df = (Seq(\n    (0, "This is a test", "this is one too"),\n    (1, "could be a test", "bar"),\n    (2, "foo", "bar"),\n    (3, "foo", "maybe not"))\n    .toDF("label", "words1", "words2"))\n\nval stage1 = new Tokenizer()\nval mca = (new MultiColumnAdapter()\n        .setBaseStage(stage1)\n        .setInputCols(Array[String]("words1",  "words2"))\n        .setOutputCols(Array[String]("output1", "output2")))\n\nmca.fit(df).transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"MultiColumnAdapter",py:"synapse.ml.stages.html#module-synapse.ml.stages.MultiColumnAdapter",scala:"com/microsoft/azure/synapse/ml/stages/MultiColumnAdapter.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MultiColumnAdapter.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"timer"},"Timer"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.ml.feature import *\n\ndf = (spark.createDataFrame([\n        (0, "Hi I"),\n        (1, "I wish for snow today"),\n        (2, "we Cant go to the park, because of the snow!"),\n        (3, "")\n      ], ["label", "sentence"]))\n\ntok = (Tokenizer()\n      .setInputCol("sentence")\n      .setOutputCol("tokens"))\n\ndf2 = Timer().setStage(tok).fit(df).transform(df)\n\ndf3 = HashingTF().setInputCol("tokens").setOutputCol("hash").transform(df2)\n\nidf = IDF().setInputCol("hash").setOutputCol("idf")\ntimer = Timer().setStage(idf)\n\ntimer.fit(df3).transform(df3).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.ml.feature._\n\nval df = (Seq(\n    (0, "Hi I"),\n    (1, "I wish for snow today"),\n    (2, "we Cant go to the park, because of the snow!"),\n    (3, "")\n  ).toDF("label", "sentence"))\n\nval tok = (new Tokenizer()\n      .setInputCol("sentence")\n      .setOutputCol("tokens"))\n\nval df2 = new Timer().setStage(tok).fit(df).transform(df)\n\nval df3 = new HashingTF().setInputCol("tokens").setOutputCol("hash").transform(df2)\n\nval idf = new IDF().setInputCol("hash").setOutputCol("idf")\nval timer = new Timer().setStage(idf)\n\ntimer.fit(df3).transform(df3).show()\n')))),(0,s.kt)(i.Z,{className:"Timer",py:"synapse.ml.stages.html#module-synapse.ml.stages.Timer",scala:"com/microsoft/azure/synapse/ml/stages/Timer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Timer.scala",mdxType:"DocTable"}))}F.isMDXComponent=!0;var L=["components"],Z=[{value:"Train",id:"train",level:2},{value:"TrainClassifier",id:"trainclassifier",level:3},{value:"TrainRegressor",id:"trainregressor",level:3}],O={toc:Z};function _(e){var a=e.components,n=(0,o.Z)(e,L);return(0,s.kt)("wrapper",(0,t.Z)({},O,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"train"},"Train"),(0,s.kt)("h3",{id:"trainclassifier"},"TrainClassifier"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\nfrom pyspark.ml.classification import LogisticRegression\n\ndf = spark.createDataFrame([\n      (0, 2, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 4, 0.78, 0.99, 2),\n      (1, 5, 0.12, 0.34, 3),\n      (0, 1, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3),\n      (0, 0, 0.50, 0.60, 0),\n      (1, 2, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3)],\n      ["Label", "col1", "col2", "col3", "col4"]\n)\n\ntc = (TrainClassifier()\n      .setModel(LogisticRegression())\n      .setLabelCol("Label"))\n\ntc.fit(df).transform(df).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport org.apache.spark.ml.classification.LogisticRegression\n\nval df = (Seq(\n      (0, 2, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 4, 0.78, 0.99, 2),\n      (1, 5, 0.12, 0.34, 3),\n      (0, 1, 0.50, 0.60, 0),\n      (1, 3, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3),\n      (0, 0, 0.50, 0.60, 0),\n      (1, 2, 0.40, 0.50, 1),\n      (0, 3, 0.78, 0.99, 2),\n      (1, 4, 0.12, 0.34, 3))\n      .toDF("Label", "col1", "col2", "col3", "col4"))\n\nval tc = (new TrainClassifier()\n      .setModel(new LogisticRegression())\n      .setLabelCol("Label"))\n\ntc.fit(df).transform(df).show()\n')))),(0,s.kt)(i.Z,{className:"TrainClassifier",py:"synapse.ml.train.html#module-synapse.ml.train.TrainClassifier",scala:"com/microsoft/azure/synapse/ml/train/TrainClassifier.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/TrainClassifier.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"trainregressor"},"TrainRegressor"),(0,s.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\nfrom pyspark.ml.regression import LinearRegression\n\ndataset = (spark.createDataFrame([\n    (0.0, 2, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 4, 0.78, 0.99, 2.0),\n    (3.0, 5, 0.12, 0.34, 3.0),\n    (0.0, 1, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0),\n    (0.0, 0, 0.50, 0.60, 0.0),\n    (1.0, 2, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0)],\n    ["label", "col1", "col2", "col3", "col4"]))\n\nlinearRegressor = (LinearRegression()\n      .setRegParam(0.3)\n      .setElasticNetParam(0.8))\ntrainRegressor = (TrainRegressor()\n      .setModel(linearRegressor)\n      .setLabelCol("label"))\n\ntrainRegressor.fit(dataset).transform(dataset).show()\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport org.apache.spark.ml.regression.LinearRegression\n\nval dataset = (spark.createDataFrame(Seq(\n    (0.0, 2, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 4, 0.78, 0.99, 2.0),\n    (3.0, 5, 0.12, 0.34, 3.0),\n    (0.0, 1, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0),\n    (0.0, 0, 0.50, 0.60, 0.0),\n    (1.0, 2, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0)))\n    .toDF("label", "col1", "col2", "col3", "col4"))\n\nval linearRegressor = (new LinearRegression()\n      .setRegParam(0.3)\n      .setElasticNetParam(0.8))\nval trainRegressor = (new TrainRegressor()\n      .setModel(linearRegressor)\n      .setLabelCol("label"))\n\ntrainRegressor.fit(dataset).transform(dataset).show()\n')))),(0,s.kt)(i.Z,{className:"TrainRegressor",py:"synapse.ml.train.html#module-synapse.ml.train.TrainRegressor",scala:"com/microsoft/azure/synapse/ml/train/TrainRegressor.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/TrainRegressor.scala",mdxType:"DocTable"}))}_.isMDXComponent=!0;var E=["components"],P={title:"Estimators - Core",sidebar_label:"Core",hide_title:!0},B=void 0,A={unversionedId:"documentation/estimators/estimators_core",id:"version-0.9.5/documentation/estimators/estimators_core",title:"Estimators - Core",description:"",source:"@site/versioned_docs/version-0.9.5/documentation/estimators/estimators_core.md",sourceDirName:"documentation/estimators",slug:"/documentation/estimators/estimators_core",permalink:"/SynapseML/docs/0.9.5/documentation/estimators/estimators_core",draft:!1,tags:[],version:"0.9.5",frontMatter:{title:"Estimators - Core",sidebar_label:"Core",hide_title:!0},sidebar:"docs",previous:{title:"Cognitive",permalink:"/SynapseML/docs/0.9.5/documentation/estimators/estimators_cognitive"},next:{title:"LightGBM",permalink:"/SynapseML/docs/0.9.5/documentation/estimators/estimators_lightgbm"}},V={},H=[].concat(c,f,k,M,N,R,Z),K={toc:H};function U(e){var a=e.components,n=(0,o.Z)(e,E);return(0,s.kt)("wrapper",(0,t.Z)({},K,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)(u,{mdxType:"AutoML"}),(0,s.kt)(v,{mdxType:"Featurize"}),(0,s.kt)(h,{mdxType:"IsolationForest"}),(0,s.kt)(I,{mdxType:"NN"}),(0,s.kt)(D,{mdxType:"Recommendation"}),(0,s.kt)(F,{mdxType:"Stages"}),(0,s.kt)(_,{mdxType:"Train"}))}U.isMDXComponent=!0}}]);